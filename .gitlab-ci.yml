stages:
  - test
  - build
  - deploy

include:
  - template: Code-Quality.gitlab-ci.yml

code_quality:
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
  after_script:
    - cat gl-code-quality-report.json


variables:
  POSTGRES_DB: $CI_POSTGRES_DATABASE
  POSTGRES_USER: $CI_POSTGRES_USER
  POSTGRES_PASSWORD: $CI_POSTGRES_PASSWORD
  APP_VERSION: $CI_COMMIT_TAG

.slack:
    before_script:
     - sh /slack_message "$INIT_MESSAGE" $SLACK_WEBHOOK_URL
    after_script:
     - cat /tmp/success && sh /slack_message "$SUCCESS_MESSAGE" $SLACK_WEBHOOK_URL || sh /slack_message "$ERROR_MESSAGE" $SLACK_WEBHOOK_URL

run_tests:
  image: $CI_PROJECT_BASE_IMAGE
  stage: test
  
  services:
    - postgres
    - redis
  
  variables:
    DATABASE_HOST: postgres
    DATABASE_PORT: 5432

  script:
    - pip install -r requirements.txt
    - pytest --cov --junitxml=report.xml

  after_script:
    - bash <(curl -s https://codecov.io/bash)

  artifacts:
    reports:
      junit: report.xml

  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

build_branch_image:
  image: registry.gitlab.com/pablo-moreno/builder
  stage: build
  extends: .slack
  services:
    - docker:19.03.1-dind
  only:
    - develop
    - master

  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    INIT_MESSAGE: ":rocket: Building and uploading image"
    ERROR_MESSAGE: ":x: Ups, pipeline error :("
    SUCCESS_MESSAGE: ":heavy_check_mark: Image built and uploaded successfully"

  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_DOCKER_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg VERSION=$CI_COMMIT_REF_NAME --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - touch /tmp/success


build_tag_image:
  image: registry.gitlab.com/pablo-moreno/builder
  stage: build
  extends: .slack
  services:
    - docker:19.03.1-dind
  only:
    - tags

  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    INIT_MESSAGE: ":rocket: Building and uploading image"
    ERROR_MESSAGE: ":x: Ups, pipeline error :("
    SUCCESS_MESSAGE: ":heavy_check_mark: Image built and uploaded successfully"

  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_DOCKER_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --build-arg VERSION=$APP_VERSION --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:latest
    - touch /tmp/success

deploy_image:
  image: registry.gitlab.com/pablo-moreno/builder
  stage: deploy
  extends: .slack
  only:
    - tags
  when: manual
  variables:
    INIT_MESSAGE: ":rocket: deploying $CI_REGISTRY_IMAGE to production"
    ERROR_MESSAGE: ":x: Oops. Something went wrong :violin:"
    SUCCESS_MESSAGE: ":tada: We're in production!"

  script:
    - wget --post-data "" $CD_WEBHOOK
    - touch /tmp/success
